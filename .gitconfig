[user]
    name = Ã˜ystein Krog
    email = oystein.krog@gmail.com

[init]
    templateDir = ~/.dotfiles/.git_template

[core]
    autocrlf = false
    symlinks = true
    filemode = true
    preloadindex = true
    fscache = true
    commitGraph = true
	editor = vim
    longpaths = true
    #pager = "diff-so-fancy | less --tabs=4 -RFX"
[commit]
    verbose = true

[credential]
    useHttpPath = true
	helper = /c/Program\\ Files/Git/mingw64/libexec/git-core/git-credential-manager.exe
[credential "https://dev.azure.com"]
	useHttpPath = true

[push]
    #default = simple
	default = current
[pull]
    default = current
[branch]
    autosetuprebase = always
    sort = authordate
[apply]
    whitespace = nowarn
[rebase]
    autoSquash = false
    useBuiltin = true
[stash]
    useBuiltin = true

[submodule]
    fetchJobs = 4

[interactive]
    #diffFilter = diff-so-fancy

[pager]
    #log = "diff-so-fancy | less --tabs=4 -RFX"
    #show = "diff-so-fancy | less --tabs=4 -RFX"
    #diff = "diff-so-fancy | less --tabs=4 -RFX"

[diff]
    memonicprefix = true
    compactionHeuristic = true
    tool = semanticdiff
[difftool]
    prompt = false
[difftool "semanticdiff"]
    cmd = $LOCALAPPDATA/semanticmerge/semanticmergetool.exe -nolangwarn -s "$(wslpath -w $LOCAL)" -d "$(wslpath -w $REMOTE)"

[merge]
    tool = tortoise
[mergetool]
    prompt = false
    keepBackup = false
[mergetool "splice"]
    cmd = "vim -f $BASE $LOCAL $REMOTE $MERGED -c 'SpliceInit'"
    trustExitCode = true
[mergetool "vimdiff"]
    trustExitCode = true
    conflictstyle = diff3
;[mergetool "semanticmerge"]
    ;cmd = \"$(echo $(cmd.exe /C \"echo %LOCALAPPDATA%\"\"\\semanticmerge\\semanticmergetool.exe\")) -d $(wslpath -wa \"$LOCAL\") -s $(wslpath -wa \"$REMOTE\") -b $(wslpath -wa \"$BASE\") -r $(wslpath -wa \"$MERGED\") --automatic --nolangwarn \"
    ;trustExitCode = true
[mergetool "semanticmerge"]
    cmd = /c/Users/oyste/.dotfiles/win_merge.sh semanticmerge $LOCAL $REMOTE $BASE $MERGED
    trustExitCode = true
[mergetool "tortoise"]
    cmd = /c/Users/oyste/.dotfiles/win_merge.sh tortoisemerge "$LOCAL" "$REMOTE" "$BASE" "$MERGED"

[color]
    ui = true
    branch = auto
    diff = auto
    status = auto
[color "branch"]
    current = red reverse
    local = blue
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[alias]
    st = status -s

    cl = clone

    ci = commit
    cm = commit -m
    cma = commit -a -m
    ca = commit --amend
    amend = commit --amend
    caa = commit -a --amend -C HEAD
    filelog = log -u
    fl = log -u

    ai = add --interactive

    co = checkout
    br = branch 
    #"!git branch -ra | grep -v done"
    bra = branch -ra
    #list commands
    le = log --oneline --decorate
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    ls1 = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
    lds = log --pretty=format:"%C(yellow)%h\\ %C(green)%ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short --graph
    ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    lc  = "!f() { git ll "$1"^.."$1"; }; f"
    lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
    #list all aliases
    la = "!git config -l | grep alias | cut -c 7-"
    diff = diff --word-diff
    d = diff --word-diff
    dc = diff --cached
    #list modified files in last commit
    dl = "!git ll -1"
    #diff last commit
    dlc = diff --cached HEAD^
    dr  = "!f() { git diff -w "$1"^.."$1"; }; f"
    diffr  = "!f() { git diff "$1"^.."$1"; }; f"
    branch = branch -ra

    #reset commands
    r = reset
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rh = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard

    #git svn
    svnr = svn rebase
    svnd = svn dcommit
    svnl = svn log --oneline --show-commit

    #stash
    sl = stash list
    sa = stash apply
    ss = stash save

    cp = cherry-pick
    grep = grep -Ii
    gr = grep -Ii
    #grep from root folder
    gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

    #grep on filename
    f = "!git ls-files | grep -i"

    #rename branch tree to done-
    done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"

    #assume aliases
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    #show assumed files
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    #unassume all the assumed files
    unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
    assumeall = "!git st -s | awk {'print $2'} | xargs git assume"

    lasttag = describe --tags --abbrev=0
    lt = describe --tags --abbrev=0

    #merges
    ours = "!f() { git co --ours $@ && git add $@; }; f"
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"

    #list remotes
    rem="!git config -l | grep remote.*url | tail -n +2"

    #apply patch from other local repo
    lap = "!f() { git --git-dir=$1 format-patch -k -1 --stdout $2 | git am -3 -k; }; f"

    #subtree add
    sba = "!f() { git subtree add --prefix $2 $1 master --squash; }; f" 
    # initial empty commit
    empty = "!git commit -am\"[empty] Initial commit\" --allow-empty"

[rerere]
    enabled = true
[hub]
	protocol = https
[winUpdater]
	recentlySeenVersion = 2.25.0.windows.1
